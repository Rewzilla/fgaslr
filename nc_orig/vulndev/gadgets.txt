


Gadgets
=======


0x0000000000003210: adc byte ptr [rsi - 0x3f], ah; ret 0xf08; 
0x00000000000032d4: adc byte ptr [rsi - 0x3f], ah; ret; 
0x0000000000003374: add al, 0x17; add dword ptr [rbx + 0x396601e8], eax; sal dword ptr [rsi - 0xf], 0x48; add esp, 8; ret; 
0x00000000000050c8: add al, ch; ret 0xffd4; 
0x0000000000003487: add al, ch; ret; 
0x00000000000045de: add al, ch; std; call 0xffffffff894945e5; ret; 
0x000000000000285f: add byte ptr [eax], al; call 0x23e0; call 0x27d0; mov byte ptr [rip + 0x6835], 1; pop rbp; ret; 
0x0000000000003a27: add byte ptr [rax - 0x77], cl; fucomip st(0); sub dl, 0xff; dec dword ptr [rax + 1]; ret; 
0x0000000000003319: add byte ptr [rax - 0x77], cl; ret 0xffb9; 
0x000000000000282a: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x00000000000027e9: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000000200e: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x00000000000027f3: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x00000000000050c6: add byte ptr [rax], al; add al, ch; ret 0xffd4; 
0x0000000000003485: add byte ptr [rax], al; add al, ch; ret; 
0x00000000000045dc: add byte ptr [rax], al; add al, ch; std; call 0xffffffff894945e5; ret; 
0x00000000000027f4: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000000028cf: add byte ptr [rax], al; add byte ptr [rbp + 7], dh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000000593e: add byte ptr [rax], al; add byte ptr [rsi + 0x39], ah; ret; 
0x0000000000002a78: add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000002bbd: add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000002860: add byte ptr [rax], al; call 0x23e0; call 0x27d0; mov byte ptr [rip + 0x6835], 1; pop rbp; ret; 
0x0000000000002bb1: add byte ptr [rax], al; call 0x23f0; lea rax, [rip + 0x66a1]; add rsp, 8; ret; 
0x0000000000003344: add byte ptr [rax], al; cmove eax, edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000028d0: add byte ptr [rax], al; jne 0x28db; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000002a72: add byte ptr [rax], al; mov dword ptr [rip + 0x66fa], edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000002bac: add byte ptr [rax], al; mov edi, 0xa; call 0x23f0; lea rax, [rip + 0x66a1]; add rsp, 8; ret; 
0x000000000000200d: add byte ptr [rax], al; test rax, rax; je 0x2016; call rax; add rsp, 8; ret; 
0x00000000000027f6: add byte ptr [rax], al; ret; 
0x0000000000002835: add byte ptr [rax], r8b; ret; 
0x00000000000028d1: add byte ptr [rbp + 7], dh; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000003016: add byte ptr [rbp + rcx*4 + 0x3d], cl; ret 0x33; 
0x000000000000300f: add byte ptr [rbp + rcx*4 - 0x4b], cl; add byte ptr [rbx], 0; add byte ptr [rbp + rcx*4 + 0x3d], cl; ret 0x33; 
0x0000000000003013: add byte ptr [rbx], 0; add byte ptr [rbp + rcx*4 + 0x3d], cl; ret 0x33; 
0x0000000000002871: add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000002bad: add byte ptr [rdi + 0xa], bh; call 0x23f0; lea rax, [rip + 0x66a1]; add rsp, 8; ret; 
0x0000000000005940: add byte ptr [rsi + 0x39], ah; ret; 
0x0000000000003742: add cl, byte ptr [rax - 0x7d]; ret 0x8b04; 
0x0000000000002b0c: add dword ptr [rax + 0x39], ecx; ret 0xf275; 
0x0000000000003da7: add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000000300d: add dword ptr [rax], eax; add byte ptr [rbp + rcx*4 - 0x4b], cl; add byte ptr [rbx], 0; add byte ptr [rbp + rcx*4 + 0x3d], cl; ret 0x33; 
0x0000000000003e9d: add dword ptr [rbp + 0x76], esi; mov eax, ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000003376: add dword ptr [rbx + 0x396601e8], eax; sal dword ptr [rsi - 0xf], 0x48; add esp, 8; ret; 
0x0000000000003379: add dword ptr [rsi + 0x39], esp; sal dword ptr [rsi - 0xf], 0x48; add esp, 8; ret; 
0x0000000000002bba: add eax, 0x66a1; add rsp, 8; ret; 
0x0000000000003014: add eax, dword ptr [rax]; add byte ptr [rbp + rcx*4 + 0x3d], cl; ret 0x33; 
0x0000000000002b0a: add edx, 1; cmp rdx, rax; jne 0x2b04; mov eax, esi; ret; 
0x0000000000003970: add esp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000042e5: add esp, 0x38; pop rbx; pop rbp; pop r12; pop r14; ret; 
0x00000000000031e8: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000028d5: add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000002017: add esp, 8; ret; 
0x0000000000002b09: add rdx, 1; cmp rdx, rax; jne 0x2b04; mov eax, esi; ret; 
0x000000000000396f: add rsp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000042e4: add rsp, 0x38; pop rbx; pop rbp; pop r12; pop r14; ret; 
0x00000000000031e7: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000028d4: add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000002016: add rsp, 8; ret; 
0x000000000000320c: and al, 0xf; mov bh, 0x50; adc byte ptr [rsi - 0x3f], ah; ret 0xf08; 
0x0000000000004901: and byte ptr [rax + 0x39], cl; ret 0xec75; 
0x0000000000002862: call 0x23e0; call 0x27d0; mov byte ptr [rip + 0x6835], 1; pop rbp; ret; 
0x0000000000002bb3: call 0x23f0; lea rax, [rip + 0x66a1]; add rsp, 8; ret; 
0x0000000000002aca: call 0x2510; pop rbx; pop rbp; pop r12; ret; 
0x0000000000002867: call 0x27d0; mov byte ptr [rip + 0x6835], 1; pop rbp; ret; 
0x0000000000004fa3: call 0x8c4d2f0; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000002c14: call 0xffffffff86002c10; sal byte ptr [rbp + 7], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000045e1: call 0xffffffff894945e5; ret; 
0x0000000000003378: call 0xffffffffc139997e; jbe 0x3370; add rsp, 8; ret; 
0x0000000000002014: call rax; add rsp, 8; ret; 
0x0000000000003346: cmove eax, edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000003972: cmp byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000042e7: cmp byte ptr [rbx + 0x5d], bl; pop r12; pop r14; ret; 
0x000000000000337a: cmp cx, ax; jbe 0x3370; add rsp, 8; ret; 
0x00000000000028cb: cmp dword ptr [rip + 0x6806], 0; jne 0x28db; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000002a75: cmp eax, 0x66fa; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000000028cc: cmp eax, 0x6806; add byte ptr [rbp + 7], dh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000000337b: cmp ecx, eax; jbe 0x3370; add rsp, 8; ret; 
0x0000000000002b0e: cmp edx, eax; jne 0x2b04; mov eax, esi; ret; 
0x0000000000002b0d: cmp rdx, rax; jne 0x2b04; mov eax, esi; ret; 
0x00000000000028ca: cmp word ptr [rip + 0x6806], 0; jne 0x28db; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000003a2f: dec dword ptr [rax + 1]; ret; 
0x0000000000002bb7: dec dword ptr [rax - 0x73]; add eax, 0x66a1; add rsp, 8; ret; 
0x0000000000002c89: dec dword ptr [rax - 0x77]; ret; 
0x0000000000003063: dec dword ptr [rax - 0x7d]; ret; 
0x00000000000032d0: dec dword ptr [rdi]; mov bh, 0x5b; adc byte ptr [rsi - 0x3f], ah; ret; 
0x00000000000035f7: fisub dword ptr [rsi - 0x3f]; ret 0x4808; 
0x0000000000003a2a: fucomip st(0); sub dl, 0xff; dec dword ptr [rax + 1]; ret; 
0x0000000000002c15: idiv edi; inc dword ptr [rbp + 0x480775c0]; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000004468: imul eax; ret 0xffe0; 
0x0000000000003317: inc dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0xffb9; 
0x0000000000005e8e: inc dword ptr [rax]; endbr64; sub rsp, 8; add rsp, 8; ret; 
0x0000000000002b59: inc dword ptr [rbp + 0x480775c0]; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000000337d: jbe 0x3370; add rsp, 8; ret; 
0x0000000000002012: je 0x2016; call rax; add rsp, 8; ret; 
0x0000000000002b07: je 0x2b15; add rdx, 1; cmp rdx, rax; jne 0x2b04; mov eax, esi; ret; 
0x00000000000028d2: jne 0x28db; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000002b10: jne 0x2b04; mov eax, esi; ret; 
0x0000000000002b5c: jne 0x2b65; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000002c1a: jne 0x2c23; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000003e9e: jne 0x3f16; mov eax, ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000004708: jne 0x4780; mov eax, ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000002ace: lcall [rbx + 0x5d]; pop r12; ret; 
0x0000000000002b18: lea eax, [rdx + 1]; ret; 
0x0000000000002bb9: lea eax, [rip + 0x66a1]; add rsp, 8; ret; 
0x0000000000002bb8: lea rax, [rip + 0x66a1]; add rsp, 8; ret; 
0x000000000000320e: mov bh, 0x50; adc byte ptr [rsi - 0x3f], ah; ret 0xf08; 
0x00000000000032d2: mov bh, 0x5b; adc byte ptr [rsi - 0x3f], ah; ret; 
0x0000000000003373: mov byte ptr [rdi + rdx], 1; sub eax, 1; cmp cx, ax; jbe 0x3370; add rsp, 8; ret; 
0x000000000000286c: mov byte ptr [rip + 0x6835], 1; pop rbp; ret; 
0x0000000000003012: mov ch, 0x80; add eax, dword ptr [rax]; add byte ptr [rbp + rcx*4 + 0x3d], cl; ret 0x33; 
0x0000000000002a74: mov dword ptr [rip + 0x66fa], edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000002b1c: mov eax, 0; ret; 
0x0000000000003ea0: mov eax, ebx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000002b12: mov eax, esi; ret; 
0x0000000000002bae: mov edi, 0xa; call 0x23f0; lea rax, [rip + 0x66a1]; add rsp, 8; ret; 
0x0000000000002ac8: mov edi, eax; call 0x2510; pop rbx; pop rbp; pop r12; ret; 
0x0000000000002ac7: mov rdi, rax; call 0x2510; pop rbx; pop rbp; pop r12; ret; 
0x0000000000002833: nop dword ptr [rax + rax]; ret; 
0x00000000000027f1: nop dword ptr [rax]; ret; 
0x0000000000002832: nop word ptr [rax + rax]; ret; 
0x0000000000002b08: or al, 0x48; add edx, 1; cmp rdx, rax; jne 0x2b04; mov eax, esi; ret; 
0x0000000000002baf: or al, byte ptr [rax]; add byte ptr [rax], al; call 0x23f0; lea rax, [rip + 0x66a1]; add rsp, 8; ret; 
0x00000000000031ea: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000000028d7: or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000002b06: or dh, byte ptr [rsp + rcx + 0x48]; add edx, 1; cmp rdx, rax; jne 0x2b04; mov eax, esi; ret; 
0x0000000000002fba: out 0xe8, eax; ret; 
0x0000000000002ed8: pop r12; pop r13; pop r14; pop r15; ret; 
0x00000000000031ed: pop r12; pop r13; ret; 
0x00000000000042ea: pop r12; pop r14; ret; 
0x0000000000002ad1: pop r12; ret; 
0x0000000000002eda: pop r13; pop r14; pop r15; ret; 
0x00000000000031ef: pop r13; ret; 
0x0000000000002edc: pop r14; pop r15; ret; 
0x00000000000042ec: pop r14; ret; 
0x0000000000002ede: pop r15; ret; 
0x0000000000002ed7: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x00000000000031ec: pop rbp; pop r12; pop r13; ret; 
0x00000000000042e9: pop rbp; pop r12; pop r14; ret; 
0x0000000000002ad0: pop rbp; pop r12; ret; 
0x0000000000002edb: pop rbp; pop r14; pop r15; ret; 
0x0000000000002873: pop rbp; ret; 
0x00000000000032d3: pop rbx; adc byte ptr [rsi - 0x3f], ah; ret; 
0x00000000000031eb: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000000042e8: pop rbx; pop rbp; pop r12; pop r14; ret; 
0x0000000000002acf: pop rbx; pop rbp; pop r12; ret; 
0x00000000000028d8: pop rbx; pop rbp; ret; 
0x0000000000002edf: pop rdi; ret; 
0x0000000000002edd: pop rsi; pop r15; ret; 
0x00000000000042ed: pop rsi; ret; 
0x0000000000002ed9: pop rsp; pop r13; pop r14; pop r15; ret; 
0x00000000000031ee: pop rsp; pop r13; ret; 
0x00000000000042eb: pop rsp; pop r14; ret; 
0x0000000000002ad2: pop rsp; ret; 
0x000000000000286f: push 0x5d010000; ret; 
0x000000000000320f: push rax; adc byte ptr [rsi - 0x3f], ah; ret 0xf08; 
0x000000000000301a: ret 0x33; 
0x0000000000002b0b: ret 0x4801; 
0x00000000000035fa: ret 0x4808; 
0x0000000000002022: ret 0x6d; 
0x0000000000002fe3: ret 0x8348; 
0x0000000000002d44: ret 0x8349; 
0x0000000000004d47: ret 0x8948; 
0x00000000000031ba: ret 0x8949; 
0x0000000000004d22: ret 0x894c; 
0x0000000000003745: ret 0x8b04; 
0x0000000000004d0b: ret 0x8b48; 
0x00000000000048f2: ret 0xc6; 
0x000000000000538d: ret 0xe; 
0x0000000000004904: ret 0xec75; 
0x0000000000003213: ret 0xf08; 
0x0000000000002b0f: ret 0xf275; 
0x000000000000331c: ret 0xffb9; 
0x00000000000050ca: ret 0xffd4; 
0x000000000000446a: ret 0xffe0; 
0x0000000000005d46: ret 0xfffa; 
0x0000000000003372: rol dh, 1; add al, 0x17; add dword ptr [rbx + 0x396601e8], eax; sal dword ptr [rsi - 0xf], 0x48; add esp, 8; ret; 
0x000000000000282d: sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x0000000000002b5b: sal byte ptr [rbp + 7], 0x48; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000000027ec: sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x0000000000002011: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x000000000000320a: sal byte ptr [rsp + 0xf], 0xb7; push rax; adc byte ptr [rsi - 0x3f], ah; ret 0xf08; 
0x000000000000337c: sal dword ptr [rsi - 0xf], 0x48; add esp, 8; ret; 
0x0000000000004b21: sar byte ptr [rsi + 0x37], 0x89; ret; 
0x00000000000031b3: sbb dword ptr [rsi], 0x440f4800; ret 0x8949; 
0x0000000000003a2c: sub dl, 0xff; dec dword ptr [rax + 1]; ret; 
0x0000000000003377: sub eax, 1; cmp cx, ax; jbe 0x3370; add rsp, 8; ret; 
0x0000000000002b16: sub edx, edi; lea eax, [rdx + 1]; ret; 
0x0000000000005e95: sub esp, 8; add rsp, 8; ret; 
0x0000000000002b15: sub rdx, rdi; lea eax, [rdx + 1]; ret; 
0x0000000000005e94: sub rsp, 8; add rsp, 8; ret; 
0x0000000000002010: test eax, eax; je 0x2016; call rax; add rsp, 8; ret; 
0x0000000000002b5a: test eax, eax; jne 0x2b65; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000002c18: test eax, eax; jne 0x2c23; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000000200f: test rax, rax; je 0x2016; call rax; add rsp, 8; ret; 
0x000000000000286e: xor eax, 0x1000068; pop rbp; ret; 
0x0000000000002a76: cli; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000002b17: cli; lea eax, [rdx + 1]; ret; 
0x0000000000005e93: cli; sub rsp, 8; add rsp, 8; ret; 
0x0000000000005e90: endbr64; sub rsp, 8; add rsp, 8; ret; 
0x000000000000518a: fcos; dec dword ptr [rax - 0x77]; ret; 
0x000000000000337e: int1; add rsp, 8; ret; 
0x000000000000201a: ret; 
0x0000000000002fe2: sahf; ret 0x8348; 
0x0000000000002d43: sahf; ret 0x8349; 
0x00000000000045e0: std; call 0xffffffff894945e5; ret; 

205 gadgets found
